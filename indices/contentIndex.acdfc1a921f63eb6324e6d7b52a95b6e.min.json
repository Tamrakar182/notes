{"/":{"title":"Notes","content":"\nHello, I made this website to host my notes made for BSc. CSIT Third Semester using Obsidian.\n\nThird Semester: [[Third Semester/Course Outline|Course Outline]]\n\n\n","lastmodified":"2023-07-13T07:32:32.547335251Z","tags":[]},"/Third-Semester/Computer-Architecture/Computer-Architecture":{"title":"Computer Architecture","content":"","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Computer-Graphics/Computer-Graphics":{"title":"Computer Graphics","content":"","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Course-Outline":{"title":"Course Outline","content":"\nThis is the overall course outline for the third semester of CSIT.\n\n| S.N. | Course Code |              Title              | Credit Hours | Full Marks |\n|:----:|:-----------:|:-------------------------------:|:------------:|:----------:|\n| 1    | CSC206      | [[Third Semester/Data Structures and Algorithms/Data Structures  and Algorithms]] | 3            | 100        |\n| 2    | CSC207      | [[Third Semester/Numerical Method/Numerical Method]]               | 3            | 100        |\n| 3    | CSC208      | [[Third Semester/Computer Architecture/Computer Architecture]]           | 3            | 100        |\n| 4    | CSC209      | [[Third Semester/Computer Graphics/Computer Graphics]] | 3            | 100        |\n| 5    | STA210      | [[Third Semester/Statistics II/Statistics II]]                   | 3            | 100        |\n\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Asymptotic-notations-and-common-functions":{"title":"Asymptotic notations and common functions","content":"","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Binary-Search":{"title":"Binary Search","content":"\n# Binary Search\n\nTags: #algorithms \n\nBinary Search Algorithm is another approach to the Searching where we follow a [[divide and conquer]] approach by dividing the searching space in half and comparing the search term with the middle element until the target element is found. Binary Search Algorithm is more efficient than Linear Search Algorithm when given a sorted data collection since the no. of comparisons required to find the target element is halved every iteration.\n\n## Algorithm\n\n1. Start\n2. Set the left or first index to be 0 and last index as `n-1`; where n=no. of elements.\n3. Set the middle index to be the average of first and last indices.\n4. If the target element is at the middle index, return the middle index element of the [[array]]\n5. If the target element is less than the element at middle index, set the last index to be `(middle-1)`\n6. If the target element is greater than the element at middle index, set the first index to be `(middle+1)`\n7. Iterate over the steps 3,4,5 and 6 until the target element is found or if the first index is smaller than the last index *(in this case the element was not found)*\n\n##### Note: This requires the array to be sorted\n\n## Program in C\n\n```C\n#include \u003cstdio.h\u003e\n\nint binarysearch (int arr[], int size, int searchitem) {\n    int first = 0;\n    int last = size-1;\n    int middle = (first+last)/2;\n\n    while(first\u003c=last) {\n        if(arr[middle]\u003csearchitem) {\n            first = middle+1;\n            middle = (first+last)/2;\n        } else if ( arr[middle] == searchitem) {\n            return middle;\n        } else {\n            last = middle-1;\n            middle = (first+last)/2;\n        }\n        if (first\u003elast) {\n            return -1;\n        }\n    }\n}\n\nint main() {\n    int arr[] = {2,3,4,10,40};\n    int x = 10;\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int result = binarysearch(arr, n, x);\n    if(result == -1){\n        printf(\"Element is not present in array\");\n    }\n    else{\n        printf(\"Element is present at index %d\", result);\n    }\n    return 0;\n}\n```\n\n## Asymptotic Notation\n\nWorst Case Time Complexity: `O(logn)`\nBest Case Time Complexity: `O(1)`\nSpace Complexity: `O(1)` *it may require additional memory to store collection in a random access data structure like an [[array]]*\n\n## Use Case\n\nIt is useful when the collection is large and sorted.\n\nRelated: [[Third Semester/Data Structures and Algorithms/Linear Search|Linear Search]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["algorithms"]},"/Third-Semester/Data-Structures-and-Algorithms/Chapter-1-Introduction-to-Data-Structures-and-Algorithms":{"title":"Chapter 1 Introduction to Data Structures and Algorithms","content":"# Introduction to Data Structures and Algorithms\n\nTags: #chapters \n\nIn this chapter, we will learn about:\n- [[Third Semester/Data Structures and Algorithms/Data types, Data Structures and Abstract Data Type|Data types, Data Structures and Abstract Data Type]]\n- [[Third Semester/Data Structures and Algorithms/Dynamic memory allocation in C|Dynamic memory allocation in C]]\n- [[Introduction to Algorithms]]\n- [[Third Semester/Data Structures and Algorithms/Asymptotic notations and common functions|Asymptotic notations and common functions]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["chapters"]},"/Third-Semester/Data-Structures-and-Algorithms/Chapter-2-Stack":{"title":"Chapter 2 Stack","content":"# Stack\n\nTags: #chapters \n\nIn this chapter, we will learn about:\n- [[Third Semester/Data Structures and Algorithms/Stack, Stack as an ADT, Stack Operations and Stack Applications|Stack, Stack as an ADT, Stack Operations and Stack Applications]]\n- [[Conversion from infix to postfix-prefix expression, Evaluation of postfix-prefix expressions]]\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["chapters"]},"/Third-Semester/Data-Structures-and-Algorithms/Chapter-3-Queue":{"title":"Chapter 3 Queue","content":"# Queue\n\nTags: #chapters \n\nIn this chapter, we will learn about:\n- [[Third Semester/Data Structures and Algorithms/Queue, Queue as an ADT, Primitive Operations in Queue|Queue, Queue as an ADT, Primitive Operations in Queue]]\n- [[Linear Queue, Circular Queue, Priority Queue, Queue Applications]]\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["chapters"]},"/Third-Semester/Data-Structures-and-Algorithms/Chapter-6-Sorting":{"title":"Chapter 6 Sorting","content":"# Sorting\n\nTags: #chapters \n\nIn this chapter, we will learn about:\n- [[Introduction and Types of sorting, Internal and External sort]]\n- [[Comparison Sorting Algorithms, Bubble, Selection and Insertion Sort, Shell Sort]]\n- [[Third Semester/Data Structures and Algorithms/Divide and Conquer Sorting Algorithms, Quick, Merge and Heap sort|Divide and Conquer Sorting Algorithms, Quick, Merge and Heap sort]]\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["chapters"]},"/Third-Semester/Data-Structures-and-Algorithms/Chapter-7-Searching-and-Hashing":{"title":"Chapter 7 Searching and Hashing","content":"# Searching and Hashing\n\nTags: #chapters \n\nIn this chapter, we will learn about:\n- [[Third Semester/Data Structures and Algorithms/Introduction to Searching and Search Algorithms|Introduction to Searching and Search Algorithms]]\n- [[Third Semester/Data Structures and Algorithms/Hashing, Hash functions and Hash tables, Collision Resolution Techniques|Hashing, Hash functions and Hash tables, Collision Resolution Techniques]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["chapters"]},"/Third-Semester/Data-Structures-and-Algorithms/Chapter-8-Tress-and-Graphs":{"title":"Chapter 8 Tress and Graphs","content":"# Trees and Graphs\n\nTags: #chapters \n\nIn this chapter, we will learn about:\n- [[Third Semester/Data Structures and Algorithms/Concept and Definitions, Basic Operations in Binary Tree, Tree Height, Level and Depth|Concept and Definitions, Basic Operations in Binary Tree, Tree Height, Level and Depth]]\n- [[Binary Search Tree, Insertion, Deletion, Traversals, Search in BST]]\n- [[AVL Tree and Balancing Algorithm, Applications of Trees]]\n- [[Definition and Representation of Graphs, Graph Traversal, Minimum Spanning Tree, Kruskal and Prims Algorithm]]\n- [[Shortest Path Algorithms, Dijkstra Algorithm]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["chapters"]},"/Third-Semester/Data-Structures-and-Algorithms/Circular-Queue":{"title":"Circular Queue","content":"\n# Circular Queue\n\nCircular Queue is a temporary storage device which stores data and performs [[Inqueue]] and [[Dequeue]] operations in a [[FIFO]] sequence. Sequence CQ connects REAR and FRONT of [[linear queue]] in a circular manner of operations.\n\n#### Example:\n\n##### Linear Queue\n| A   | B   | C   | D   | E   |\n| --- | --- | --- | --- | --- |\n| 0   | 1   | 2   | 3   | 4   |\n\n##### Circular Queue\n``Reminder: put a circular queue figure``\n\n#### Trace process or algorithm for Circular Queue for `inqueue` and `dequeue` of items `{A, B, C}`\n- `Maxsize of CQ = 3 (0 to 2)`\n- Rear, front\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Concept-and-Definitions-Basic-Operations-in-Binary-Tree-Tree-Height-Level-and-Depth":{"title":"Concept and Definitions, Basic Operations in Binary Tree, Tree Height, Level and Depth","content":"# Tree, Graph and Binary Tree\n\n- [[Third Semester/Data Structures and Algorithms/Tree|Tree]]\n- [[Graph]]\n- [[Binary Tree]]\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Data-Structure":{"title":"Data Structure","content":"# Data Structure\n\nA Data Structure is a specialized format for organizing, processing, retrieving and storing data. It is a way of organizing data so that it can be accessed and used efficiently.\n\nThe following are some of the reasons why data structures are important:\n1. Efficient Data Access and Manipulation\n2. Algorithm Design\n3. Performance Optimization\n4. Problem Solving\n\n### Types of Data Structures:\n1. [[Third Semester/Data Structures and Algorithms/Linear Data Structure|Linear Data Structure]]\n2. [[Third Semester/Data Structures and Algorithms/Non-Linear Data Structure|Non-Linear Data Structure]]\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Data-Structures-and-Algorithms":{"title":"Data Structures  and Algorithms","content":"# Data Structures and Algorithms\nTags: #dsa #essential\n\nDSA or Data Structures and Algorithm covers concepts of [[stack]], [[queue]], [[Third Semester/Data Structures and Algorithms/linked lists|linked lists]], [[Third Semester/Data Structures and Algorithms/Tree|Tree]] and [[graph]] along with ideas of [[sorting]] and [[Third Semester/Data Structures and Algorithms/Searching|Searching]].\n\n- [[Third Semester/Data Structures and Algorithms/Chapter 1 Introduction to Data Structures and Algorithms|Chapter 1 Introduction to Data Structures and Algorithms]]\n- [[Third Semester/Data Structures and Algorithms/Chapter 2 Stack|Chapter 2 Stack]]\n- [[Third Semester/Data Structures and Algorithms/Chapter 3 Queue|Chapter 3 Queue]]\n- [[Chapter 4 Recursion]]\n- [[Chapter 5 Lists]]\n- [[Third Semester/Data Structures and Algorithms/Chapter 6 Sorting|Chapter 6 Sorting]]\n- [[Third Semester/Data Structures and Algorithms/Chapter 7 Searching and Hashing|Chapter 7 Searching and Hashing]]\n- [[Third Semester/Data Structures and Algorithms/Chapter 8 Tress and Graphs|Chapter 8 Tress and Graphs]]\n- [[Practical Assignments]]\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["dsa","essential"]},"/Third-Semester/Data-Structures-and-Algorithms/Data-types-Data-Structures-and-Abstract-Data-Type":{"title":"Data types, Data Structures and Abstract Data Type","content":"# Data Types, Data Structures and Abstract Data Type\n\n- [[Data Types in C]]\n- [[Third Semester/Data Structures and Algorithms/Data Structure|Data Structure]]\n- [[Abstract Data Type]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Divide-and-Conquer-Sorting-Algorithms-Quick-Merge-and-Heap-sort":{"title":"Divide and Conquer Sorting Algorithms, Quick, Merge and Heap sort","content":"","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Dynamic-memory-allocation-in-C":{"title":"Dynamic memory allocation in C","content":"","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Hashing":{"title":"Hashing","content":"# Hashing\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Hashing-Hash-functions-and-Hash-tables-Collision-Resolution-Techniques":{"title":"Hashing, Hash functions and Hash tables, Collision Resolution Techniques","content":"# Hashing, Hash Functions and Hash Tables, Collision Resolution Techniques\n\n- [[Third Semester/Data Structures and Algorithms/Hashing|Hashing]]\n- [[Hash Functions]]\n- [[Hash Tables]]\n- [[Hash Collision and Resolution Techniques]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Introduction-to-Searching-and-Search-Algorithms":{"title":"Introduction to Searching and Search Algorithms","content":"# Searching and Search Algorithms\n\n- [[Third Semester/Data Structures and Algorithms/Searching|Searching]]\n- [[Third Semester/Data Structures and Algorithms/Search Algorithms|Search Algorithms]]\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Linear-Data-Structure":{"title":"Linear Data Structure","content":"# Linear Data Structure\n\nA linear Data Structure is any organization of data where the elements are orders in a sequence and are not in any hierarchy. The implementation process of Linear Data Structures is relatively easy and elements can be traversed in a single run. However, linear data structures aren't as memory efficient. Example: [[stack]], [[queue]], [[array]], etc.\n\nRelated: [[Third Semester/Data Structures and Algorithms/Non-Linear Data Structure|Non-Linear Data Structure]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Linear-Queue-Circular-Queue-Priority-Queue-Queue-Applications":{"title":"Linear Queue, Circular Queue, Priority Queue, Queue Applications","content":"# Linear Queue, Circular Queue, Priority Queue and Applications of Queue\n\n- [[Third Semester/Data Structures and Algorithms/Circular Queue|Circular Queue]]\n- ","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Linear-Search":{"title":"Linear Search","content":"\n# Sequential/Linear Search\n\nTags: #algorithms \n\nLinear Search Algorithm is a rather simple algorithm that starts at one end of the list and goes through the entire list until the desired element is found, otherwise the search continues until the end of the data set.\n\n## Algorithm\n1. Start\n2. First, read the search element(Target) in the [[array]]\n3. Set an [[integer]] ``i = 0`` and repeat the steps until it reaches the end of the array.\n4. Match the key with ``arr[i]``\n5. If they key matches, return the index, otherwise increment ``i`` by 1.\n6. End\n\n##### Note: It doesn't require the array to be sorted.\n\n## Program in C\n```C\n#include \u003cstdio.h\u003e\nint search( int arr[], int n, int x){\n    int i;\n    for(i=0; i\u003cn; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main(){\n    int arr[] = {2,3,4,10,40};\n    int x = 10;\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int result = search(arr, n, x);\n    if(result == -1){\n        printf(\"Element is not present in array\");\n    }\n    else{\n        printf(\"Element is present at index %d\", result);\n    }\n    return 0;\n}\n```\n\n## Asymptotic Notation\nWorst Case Time Complexity: ``O(n)``\nBest Case Time Complexity: ``O(1)``\nSpace Complexity: ``O(1)`` *it can be performed in place without any additional memory*\n\n## Use Case\nIt is useful when the collection is small and unsorted\n\nRelated: [[Third Semester/Data Structures and Algorithms/Binary Search|Binary Search]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["algorithms"]},"/Third-Semester/Data-Structures-and-Algorithms/Non-Linear-Data-Structure":{"title":"Non-Linear Data Structure","content":"# Non-Linear Data Structure\n\nA non-linear Data Structure is any organization of data where the elements are orders in a hierarchical order. The implementation process of Non-Linear Data Structures is relatively complex and it takes multiple runs to traverse the data. However, non-linear data structures are quite memory efficient. Example: [[Third Semester/Data Structures and Algorithms/Tree|Tree]], [[graph]], [[hash table]], etc.\n\nRelated: [[Third Semester/Data Structures and Algorithms/Linear Data Structure|Linear Data Structure]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Queue-Queue-as-an-ADT-Primitive-Operations-in-Queue":{"title":"Queue, Queue as an ADT, Primitive Operations in Queue","content":"","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Search-Algorithms":{"title":"Search Algorithms","content":"\n# Search Algorithm\nA search Algorithm is any algorithm which can search through any given organization of items to find the given item\n\n## Types of Search Algorithm\nThe Search Algorithm can be classified by the type of search Operation that they perform:\n- [[Third Semester/Data Structures and Algorithms/Linear Search|Linear Search]]\n- [[Third Semester/Data Structures and Algorithms/Binary Search|Binary Search]]","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Searching":{"title":"Searching","content":"\n# Searching\n\nSearching in data structures is to find the required information in a collection of items stored as elements in the computer memory. These set of items are in different forms such as [[array]], [[Third Semester/Data Structures and Algorithms/linked lists|linked lists]], [[graph]] or [[Third Semester/Data Structures and Algorithms/Tree|Tree]]. We perform searching operations by utilizing [[Third Semester/Data Structures and Algorithms/Search Algorithms|Search Algorithms]] which effectively search through a given assortment of items.","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Stack-Stack-as-an-ADT-Stack-Operations-and-Stack-Applications":{"title":"Stack, Stack as an ADT, Stack Operations and Stack Applications","content":"","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":[]},"/Third-Semester/Data-Structures-and-Algorithms/Tree":{"title":"Tree","content":"# Tree\n\nTags: #datastructure \n\nTree in data structures is a [[Third Semester/Data Structures and Algorithms/Non-Linear Data Structure|Non-Linear Data Structure]] that has a hierarchical collection of [[Third Semester/Data Structures and Algorithms/nodes|nodes]].\n\n## Root Node\nThe very top-most node of any tree is referred to as being it's root node.\n\n","lastmodified":"2023-07-13T07:32:32.54333504Z","tags":["datastructure"]},"/Third-Semester/Data-Structures-and-Algorithms/linked-lists":{"title":"linked lists","content":"\n# Linked List\n\nTags: #datastructure \n","lastmodified":"2023-07-13T07:32:32.547335251Z","tags":["datastructure"]},"/Third-Semester/Data-Structures-and-Algorithms/nodes":{"title":"nodes","content":"# Node\n\nTags: #datastructure \n\nA node is a simple data item or value where it is an individual part of a larger [[Third Semester/Data Structures and Algorithms/Data Structure|Data Structure]]. Nodes contain data and one of more links to other nodes used to represent a [[Third Semester/Data Structures and Algorithms/Tree|Tree]] or [[Third Semester/Data Structures and Algorithms/linked lists|linked lists]]. In those data structures, it is possible to traverse form one node to another.\n\nRelated: [[Third Semester/Data Structures and Algorithms/Tree|Tree]] [[Third Semester/Data Structures and Algorithms/linked lists|linked lists]]","lastmodified":"2023-07-13T07:32:32.547335251Z","tags":["datastructure"]},"/Third-Semester/Numerical-Method/Numerical-Method":{"title":"Numerical Method","content":"","lastmodified":"2023-07-13T07:32:32.547335251Z","tags":[]},"/Third-Semester/Statistics-II/Statistics-II":{"title":"Statistics II","content":"","lastmodified":"2023-07-13T07:32:32.547335251Z","tags":[]}}